*jQuery 202: `$`, using jQuery selectors and methods*

For our *Advanced Topics* session, we'll be learning about *Back End Web Development* using <https://nodejs.org/|Node.js>!

<https://teamtreehouse.com/library/nodejs-basics/introduction-to-nodejs/hello-world|Node.js - Hello World> *(recommended)*
	- Writing Node.js is basically just writing Javascript, except that you run it using the command line, instead of inside a browser.

*How to install `express` in a Node.js Project:* Navigate to your project folder, and run `npm install express`. (You'll need to have Node.js installed, which you should already have.)

<https://teamtreehouse.com/library/express-basics/getting-started-with-express/your-first-express-app|Your First Express App> *(recommended)*
	- Holy crap, they sure take their time getting to this point. *Make sure that you've run `npm install express` in your project directory, otherwise `require("express")` won't work.*

<https://teamtreehouse.com/library/http-basics/introduction-to-http/http-request-format) and [HTTP Response Format](https://teamtreehouse.com/library/http-basics/introduction-to-http/http-response-format|HTTP Request Format> _(optional)_
	- Don't worry about using `telnet` for anything and don't worry about much of the headers and data formats in the requests - the important takeaway here is that `GET` HTTP requests are used to *read* data, and `POST` HTTP requests are used to *update* data.

<https://teamtreehouse.com/library/http-basics/get-and-post-requests-in-a-browser/using-anchors-for-get-requests|Using Anchors for GET Requests> _(optional)_
	- Turns out that we've been using HTTP requests all along, whenever we use an `<a>` tag.

<https://teamtreehouse.com/library/nodejs-basics/introduction-to-nodejs/javascript-without-the-browser|JavaScript without the Browser> _(optional)_
	- This is a great way of looking at it - fundamentally, a lot of JavaScript in the browser is the same as in Node.js, except for the stuff that's specific to the two different environments - for example, `window` on the browser, and `fs` (filesystem) in Node.js.
