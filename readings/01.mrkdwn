*Readings for Session 1*

Please give these videos a watch before this session. Should take <20 minutes. (Click "show more" to see the full list!)



*FAQ*

- Q: Do I need to answer the questions after each video?
- A: Nope! You can just skip to the next video if you'd like.

- Q: When should I complete these readings/watchings by?
- A: You should try to complete these by the start of Session 1.

- Q: Help! I need a Treehouse account!
- A: Treehouse is our textbook for the course, and costs $25/mo. You can sign up using <http://referrals.trhou.se/kenhoff2|this link>. DM <@ken> if it's a problem at all.

*Console Foundations*

	- <https://teamtreehouse.com/library/console-foundations/getting-started-with-the-console/introduction|Introduction> _(optional)_
	- <https://teamtreehouse.com/library/console-foundations/getting-started-with-the-console/running-commands|Running Commands> *(recommended)*
		- For these videos, you _can_ use the provided Treehouse console (it's a console for another computer), but it's recommended that you use the console for your computer.
			- For Macs, you can use the "Terminal" app (Applications > Utilities > Terminal).
			- For Windows, I recommend downloading <https://git-scm.com/download/win|Git Bash> and running the "Git Bash" application. (<https://teamtreehouse.com/library/git-installation-windows|Here's a tutorial>). Ignore the bit about `nano` and Windows Notepad.)
		- Skip 6:00-9:00. We won't be covering permissions, users, groups, or filesizes in this class (the stuff that looks like `drwxr-xr-x    3 ken  staff   102B Nov 16 01:13`).
	- <https://teamtreehouse.com/library/console-foundations/getting-started-with-the-console/moving-around-the-filesystem|Moving Around the Filesystem> *(recommended)*



*Life Without Version Control*

This one is entertaining, and explains a little bit about how software developers work together as teams without stepping on each other's changes. We *won't cover version control* in this course, but it's very helpful to know that it exists, and why it exists.

	- <https://teamtreehouse.com/library/git-basics/why-version-control-matters/life-without-version-control|Life Without Version Control> *(recommended)*



*How to host a site on Firebase*

Here's some instructions for hosting your site on The Internet!

Keep in mind that it's not required to deploy your changes to Firebase every single time you make a change!

Next week, I'll show you a far more efficient method to check "locally" that your changes are correct, instead of deploying to Firebase every time.

Today, we want to get something out in the world (and viewable publicly on the internet) as soon as possible, so follow these steps to get a site hosted on Firebase.


*Part 1*

1. Go to <https://firebase.google.com/|Firebase> and sign in. It should take you to <https://console.firebase.google.com/>.
2. Click "Create New Project" and put in a project name of your choosing. Anything is fine, but it'll included in the URL of your finished site.
3. Inside the dashboard for your new app, click "Hosting" on the left-hand navigation.
4. There's a lot of scary directions on this page! We'll work through them in the sections below.


*Part 2*

1. First, you need to download and install <https://nodejs.org/|Node.js> in order to set up our app. Do it now! _(ahnuld voice)_
2. Next, we need to use the *command line* to install our Firebase tools. I hope you watched the previous videos!
	- For Macs, open your *Terminal* app (Applications > Utilities > Terminal), and type `sudo npm install -g firebase-tools`. It will ask you to authenticate.
	- For Windows, open *Git Bash*, and type `npm install -g firebase-tools`. It might ask you to authenticate.
	- If it gives you a prompt that says `Password:` and the text cursor isn't actually doing anything, that's okay! Type your password as normal and hit enter - it deliberately doesn't show you any characters of your password, even obfuscated ones.


*Part 3*

1. Next, create an empty directory where you'd like to store the files for your site. You can do this with the mouse and keyboard, or if you're feeling fancy, you can use `mkdir`. You can name it whatever you want.
2. With the command line, navigate into your new directory using the `cd` command. You can also use `pwd` to make sure you got it right.
3. Run `firebase login`. You'll only have to do this once! It should open a browser window, and ask you to authenticate.
4. Run `firebase init`.
	- For "What Firebase CLI features do you want to setup for this folder?", use the up/down arrow keys to move, and `space` to select. Make sure that `Database` is *unselected* (circle is empty) and `Hosting` is *selected* (circle is full). Once you're done selecting, hit `enter`.
	- For "What do you want to use as your public directory?", I'd recommend typing `.` and hitting `enter`. (You can use `public` if you want, but then all your files will have to be in a `public` directory inside your project directory.)
	- For "Configure as a single-page app (rewrite all urls to /index.html)?" enter `N` and hit `enter`.
	- For "What Firebase project do you want to associate as default?", use the up/down arrow keys select the brand new app that you created in the first section, and hit enter.


*Part 4*

1. In your project directory, create a `index.html` file with some HTML in it, or edit another file.
2. On the command line, make sure that you're in your project directory.
3. On the command line, type `firebase deploy`.
4. On the command line, type `firebase open hosting:site`.
5. Go to part 4, step 1 and repeat as necessary.
6. Witness the vastness of your cosmic power!
